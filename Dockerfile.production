# ===========================================
# Dockerfile Production Multi-Stage pour IMENA-GEST
# Optimisé pour sécurité, performance et taille
# ===========================================

# Stage 1: Base Node.js avec sécurité renforcée
FROM node:18-alpine AS base

# Métadonnées
LABEL maintainer="IMENA-GEST Team <admin@imena-gest.com>"
LABEL description="IMENA-GEST - Système de gestion de médecine nucléaire"
LABEL version="1.0.0"
LABEL org.opencontainers.image.title="IMENA-GEST"
LABEL org.opencontainers.image.description="Application de gestion hospitalière pour médecine nucléaire"
LABEL org.opencontainers.image.vendor="IMENA-GEST"
LABEL org.opencontainers.image.licenses="Proprietary"

# Variables d'environnement de sécurité
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=2048"
ENV NPM_CONFIG_AUDIT_LEVEL=moderate
ENV NPM_CONFIG_FUND=false

# Utilisateur non-root pour sécurité
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

# Mise à jour sécurité et outils essentiels
RUN apk update && apk upgrade && \
    apk add --no-cache \
        dumb-init \
        curl \
        ca-certificates \
        tzdata && \
    rm -rf /var/cache/apk/*

# Configuration timezone
ENV TZ=Europe/Paris
RUN ln -sf /usr/share/zoneinfo/${TZ} /etc/localtime

# Stage 2: Installation des dépendances
FROM base AS deps

WORKDIR /app

# Copie des fichiers de dépendances
COPY package.json package-lock.json ./
COPY backend/package.json backend/package-lock.json ./backend/

# Installation des dépendances de production uniquement
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force

# Installation dépendances backend
WORKDIR /app/backend
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force

# Stage 3: Build du frontend
FROM base AS frontend-builder

WORKDIR /app

# Copie des dépendances installées
COPY --from=deps /app/node_modules ./node_modules
COPY package.json package-lock.json ./

# Copie du code source frontend
COPY src ./src
COPY public ./public
COPY index.html ./
COPY vite.config.ts ./
COPY tsconfig.json ./
COPY tailwind.config.js ./
COPY postcss.config.js ./

# Variables d'environnement pour le build
ARG VITE_API_URL=/api
ARG VITE_APP_VERSION=1.0.0
ARG VITE_BUILD_TIME
ENV VITE_API_URL=${VITE_API_URL}
ENV VITE_APP_VERSION=${VITE_APP_VERSION}
ENV VITE_BUILD_TIME=${VITE_BUILD_TIME}

# Installation des dev dependencies pour le build
RUN npm ci --include=dev

# Build de production
RUN npm run build && \
    npm run optimize && \
    ls -la dist/

# Stage 4: Build du backend
FROM base AS backend-builder

WORKDIR /app/backend

# Copie des dépendances installées
COPY --from=deps /app/backend/node_modules ./node_modules
COPY backend/package.json backend/package-lock.json ./

# Copie du code source backend
COPY backend/src ./src
COPY backend/tsconfig.json ./
COPY backend/jest.config.js ./

# Installation des dev dependencies pour le build
RUN npm ci --include=dev

# Build TypeScript
RUN npm run build && \
    npm run optimize && \
    ls -la dist/

# Stage 5: Production runtime
FROM base AS production

WORKDIR /app

# Variables d'environnement de production
ENV NODE_ENV=production
ENV PORT=3000
ENV HOST=0.0.0.0

# Copie des dépendances de production
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=deps --chown=nextjs:nodejs /app/backend/node_modules ./backend/node_modules

# Copie du build frontend
COPY --from=frontend-builder --chown=nextjs:nodejs /app/dist ./dist

# Copie du build backend
COPY --from=backend-builder --chown=nextjs:nodejs /app/backend/dist ./backend/dist

# Copie des fichiers de configuration
COPY --chown=nextjs:nodejs backend/package.json ./backend/
COPY --chown=nextjs:nodejs docker-compose.yml ./
COPY --chown=nextjs:nodejs nginx/ ./nginx/

# Scripts de production
COPY --chown=nextjs:nodejs scripts/docker-entrypoint.sh /usr/local/bin/
COPY --chown=nextjs:nodejs scripts/health-check.sh /usr/local/bin/

# Permissions d'exécution
RUN chmod +x /usr/local/bin/docker-entrypoint.sh && \
    chmod +x /usr/local/bin/health-check.sh

# Création des dossiers requis
RUN mkdir -p /app/logs /app/uploads /app/temp && \
    chown -R nextjs:nodejs /app

# Utilisateur non-root
USER nextjs

# Exposition des ports
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /usr/local/bin/health-check.sh

# Point d'entrée avec dumb-init pour gestion signaux
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["/usr/local/bin/docker-entrypoint.sh"]

# ===========================================
# Dockerfile pour Nginx (Production)
# ===========================================

FROM nginx:1.25-alpine AS nginx-production

# Métadonnées Nginx
LABEL component="nginx-proxy"
LABEL description="Reverse proxy et serveur statique pour IMENA-GEST"

# Installation des certificats et outils
RUN apk add --no-cache \
        openssl \
        curl \
        ca-certificates && \
    rm -rf /var/cache/apk/*

# Copie de la configuration Nginx optimisée
COPY nginx/nginx.conf /etc/nginx/nginx.conf
COPY nginx/conf.d/ /etc/nginx/conf.d/
COPY nginx/ssl/ /etc/nginx/ssl/

# Copie des fichiers statiques du frontend
COPY --from=frontend-builder /app/dist /usr/share/nginx/html

# Scripts Nginx
COPY scripts/nginx-entrypoint.sh /docker-entrypoint.d/
RUN chmod +x /docker-entrypoint.d/nginx-entrypoint.sh

# Utilisateur nginx
USER nginx

# Ports exposés
EXPOSE 80 443

# Health check Nginx
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# ===========================================
# Instructions de build et déploiement
# ===========================================

# Build des images:
# docker build -f Dockerfile.production --target production -t imena-gest:latest .
# docker build -f Dockerfile.production --target nginx-production -t imena-gest-nginx:latest .

# Run en production:
# docker run -d --name imena-gest-app \
#   -p 3000:3000 \
#   -e DATABASE_URL=postgresql://user:pass@db:5432/imena_gest \
#   -e REDIS_URL=redis://redis:6379 \
#   -v /app/logs:/app/logs \
#   -v /app/uploads:/app/uploads \
#   --restart unless-stopped \
#   imena-gest:latest

# docker run -d --name imena-gest-nginx \
#   -p 80:80 -p 443:443 \
#   --link imena-gest-app:app \
#   -v /etc/letsencrypt:/etc/letsencrypt:ro \
#   --restart unless-stopped \
#   imena-gest-nginx:latest