# ===========================================
# Docker Compose - Configuration Production
# IMENA-GEST - Déploiement Sécurisé
# ===========================================

version: '3.8'

# Configuration réseau sécurisé
networks:
  imena-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: imena-br0

# Volumes persistants
volumes:
  postgresql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/imena-gest/data/postgresql
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/imena-gest/data/redis
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/imena-gest/data/app
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/imena-gest/logs
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/imena-gest/logs/nginx
  ssl_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/imena-gest/ssl

services:

  # ===== BASE DE DONNÉES POSTGRESQL =====
  postgresql:
    image: postgres:15-alpine
    container_name: imena-postgresql
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-imena_gest}
      POSTGRES_USER: ${POSTGRES_USER:-imena_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=fr_FR.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./backend/sql/init:/docker-entrypoint-initdb.d:ro
    
    networks:
      - imena-network
    
    # Configuration sécurité
    security_opt:
      - no-new-privileges:true
    
    # Ressources limitées
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-imena_user} -d ${POSTGRES_DB:-imena_gest}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Configuration PostgreSQL optimisée
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
      -c log_statement=all
      -c log_directory=pg_log
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c logging_collector=on
      -c log_min_duration_statement=1000

  # ===== CACHE REDIS =====
  redis:
    image: redis:7-alpine
    container_name: imena-redis
    restart: unless-stopped
    
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 60
      --databases 16
    
    volumes:
      - redis_data:/data
    
    networks:
      - imena-network
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== APPLICATION BACKEND =====
  backend:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.production
      args:
        NODE_ENV: production
    
    container_name: imena-backend
    restart: unless-stopped
    
    environment:
      # Configuration générale
      NODE_ENV: production
      PORT: 3001
      TRUST_PROXY: true
      
      # Base de données
      DATABASE_URL: postgresql://${POSTGRES_USER:-imena_user}:${POSTGRES_PASSWORD}@postgresql:5432/${POSTGRES_DB:-imena_gest}
      DB_POOL_MIN: 2
      DB_POOL_MAX: 10
      DB_TIMEOUT: 30000
      
      # Cache Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_SESSION_DB: 1
      REDIS_CACHE_DB: 2
      
      # Sécurité
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      PASSWORD_PEPPER: ${PASSWORD_PEPPER}
      SESSION_SECRET: ${SESSION_SECRET}
      
      # Configuration CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-https://domain.example.com}
      CORS_CREDENTIALS: true
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
      LOG_DIRECTORY: /app/logs
      
      # Monitoring
      HEALTH_CHECK_ENABLED: true
      METRICS_ENABLED: true
      
      # Features
      RATE_LIMIT_ENABLED: true
      HELMET_ENABLED: true
      COMPRESSION_ENABLED: true
      
      # Migrations
      RUN_MIGRATIONS: ${RUN_MIGRATIONS:-false}
    
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - ssl_certs:/app/ssl:ro
    
    networks:
      - imena-network
    
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== APPLICATION FRONTEND =====
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
        VITE_API_URL: ${VITE_API_URL:-/api}
        VITE_APP_VERSION: ${APP_VERSION:-1.0.0}
    
    container_name: imena-frontend
    restart: unless-stopped
    
    environment:
      NODE_ENV: production
      PORT: 3000
    
    volumes:
      - app_logs:/app/logs
    
    networks:
      - imena-network
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== REVERSE PROXY NGINX =====
  nginx:
    image: nginx:1.25-alpine
    container_name: imena-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ssl_certs:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - app_data:/var/www/uploads:ro
    
    networks:
      - imena-network
    
    depends_on:
      - frontend
      - backend
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== MONITORING AVEC PROMETHEUS =====
  prometheus:
    image: prom/prometheus:latest
    container_name: imena-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    networks:
      - imena-network
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  # ===== VISUALISATION GRAFANA =====
  grafana:
    image: grafana/grafana:latest
    container_name: imena-grafana
    restart: unless-stopped
    
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SERVER_ROOT_URL: https://${DOMAIN:-localhost}/grafana/
      GF_SERVER_SERVE_FROM_SUB_PATH: true
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - imena-network
    
    depends_on:
      - prometheus
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ===== BACKUP AUTOMATISÉ =====
  backup:
    image: alpine:latest
    container_name: imena-backup
    restart: "no"
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-imena_gest}
      POSTGRES_USER: ${POSTGRES_USER:-imena_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      S3_BUCKET: ${S3_BACKUP_BUCKET:-}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-}
    
    volumes:
      - app_data:/app/data:ro
      - backup_data:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    
    networks:
      - imena-network
    
    depends_on:
      - postgresql
    
    security_opt:
      - no-new-privileges:true
    
    # Exécution programmée via cron externe ou orchestrateur
    profiles:
      - backup

# Volumes additionnels
volumes:
  prometheus_data:
  grafana_data:
  backup_data:
