version: '3.8'

services:
  # Base de données PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: imena-gest-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: imena_gest
      POSTGRES_USER: imena_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=fr_FR.UTF-8 --lc-ctype=fr_FR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - imena-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U imena_user -d imena_gest"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: imena-gest-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - imena-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: imena-gest-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      
      # Database
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: imena_gest
      DB_USER: imena_user
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      
      # JWT Secrets (GÉNÉRER DES CLÉS UNIQUES EN PRODUCTION)
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-your-super-secret-access-key-min-32-chars-change-me}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-min-32-chars-change-me}
      JWT_ACCESS_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_change_me}
      
      # Session
      SESSION_SECRET: ${SESSION_SECRET:-your-session-secret-min-32-chars-change-me}
      
      # Application
      API_VERSION: v1
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      
      # Sécurité
      BCRYPT_ROUNDS: 12
      MAX_LOGIN_ATTEMPTS: 5
      LOCKOUT_TIME_MINUTES: 15
      
      # Logs
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "3001:3001"
    networks:
      - imena-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: imena-gest-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001/api/v1}
      REACT_APP_NODE_ENV: ${NODE_ENV:-production}
      REACT_APP_ENABLE_HTTPS: ${REACT_APP_ENABLE_HTTPS:-false}
    ports:
      - "3000:80"
    networks:
      - imena-network
    depends_on:
      backend:
        condition: service_healthy

  # Reverse Proxy Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: imena-gest-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - imena-network
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  imena-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
